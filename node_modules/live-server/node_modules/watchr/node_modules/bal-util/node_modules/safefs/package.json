{
  "name": "safefs",
  "version": "2.0.3",
  "description": "Say goodbye to EMFILE errors! Open only as many files as the operating system supports",
  "homepage": "https://github.com/bevry/safefs",
  "keywords": [
    "fs",
    "path",
    "openFile",
    "closeFile",
    "emfile"
  ],
  "author": {
    "name": "Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/safefs/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bevry/safefs.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "devDependencies": {
    "taskgroup": "~2.0.0",
    "coffee-script": "~1.6.2",
    "joe": "~1.1.2",
    "chai": "~1.5.0"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "test": "node ./out/test/safefs-test.js"
  },
  "main": "./out/lib/safefs.js",
  "readme": "# Safe FS [![Build Status](https://secure.travis-ci.org/bevry/safefs.png?branch=master)](http://travis-ci.org/bevry/safefs)\nSay goodbye to EMFILE errors! Open only as many files as the operating system supports\n\n\n## Install\n\n### Backend\n\n1. [Install Node.js](http://bevry.me/node/install)\n2. `npm install --save safefs`\n\n### Frontend\n\n1. [See Browserify](http://browserify.org)\n\n\n\n## Usage\n\n### Example\n\n``` javascript\n// Import\nvar safefs = require('safefs');\n\n// Indicate we're wanting to open a file and reserve our space in the queue\n// If there is space in the pool, our callback will run right away\n// If there isn't space, our callback will fire as soon as there is\nsafefs.openFile(function(){\n\t// We just got some available space, lets do our stuff with the file\n\trequire('fs').writeFileSync('some-file', 'data')\n\t// Once we're done, indicate it, so that other tasks can swim in the pool too\n\tsafefs.closeFile();\n});\n\n// If we're working with an asynchronous function, it'll look like this\nsafefs.openFile(function(){\n\trequire('fs').writeFile('some-file', 'data', function(err){\n\t\tsafefs.closeFile();\n\t});\n});\n// as we only want to close file once we are completely done with it\n\n// However, that's pretty annoying have to wrap all our calls in openFile and closeFile\n// so it's a good thing that safefs provides wrappers for all the asynchronous fs methods for us\n// allowing us to just do\nsafefs.writeFile('some-file', 'data', function(err){\n\t// all done\n});\n// which will open and close the spot in the pool for us automatically, yay!\n```\n\n\n### Methods\n\nArguments suffixed with `?` are optional.\n\n- Custom methods:\n\t- `openFile(next)`\n\t- `closeFile()`\n\t- `getParentPathSync(path)`\n\t- `ensurePath(path, options?, next)` - will attempt to ensure the path exists, options:\n\t\t- `mode` - defaults to `null`\n- Wrapped fs/path methods:\n\t- `readFile(path, options?, next)`\n\t- `writeFile(path, data, options?, next)` - will also attempt to ensure the path exists\n\t- `appendFile(path, data, options?, next)` - will also attempt to ensure the path exists\n\t- `mkdir(path, mode?, next)` - mode defaults to `0o777 & (~process.umask())`\n\t- `stat(path, next)`\n\t- `readdir(path, next)`\n\t- `unlink(path, next)`\n\t- `rmdir(path, next)`\n\t- `exists(path, next)`\n\t- `existsSync(path)`\n\n\n\n### Notes\n\n- You should call `openFile` before and `afterFile` after ALL file system interaction\n- To make this possible, we maintain the following globals:\n\t- `numberOfOpenFiles` - defaults to `0`\n\t- `maxNumberOfOpenFiles` - defaults to `process.env.NODE_MAX_OPEN_FILES` if available, otherwise sets to `100`\n\t- `waitingToOpenFileDelay` - defaults to `100`\n\n\n\n## History\nYou can discover the history inside the [History.md](https://github.com/bevry/safefs/blob/master/History.md#files) file\n\n\n\n## License\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT License](http://creativecommons.org/licenses/MIT/)\n<br/>Copyright © 2013+ [Bevry Pty Ltd](http://bevry.me)\n<br/>Copyright © 2011-2012 [Benjamin Arthur Lupton](http://balupton.com)\n",
  "readmeFilename": "README.md",
  "_id": "safefs@2.0.3",
  "_from": "safefs@>=2.0.3 <2.1.0"
}
